// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for tracking user preferences and progress
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  language  String   @default("ar") // 'en' or 'ar'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User preferences
  preferences UserPreferences?
  
  // User progress tracking
  progress UserProgress[]

  @@map("users")
}

// User preferences for analytics and settings
model UserPreferences {
  id                String @id @default(cuid())
  userId            String @unique
  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Analytics consent
  analyticsEnabled  Boolean @default(false)
  cookieConsent     String? // 'accepted', 'declined', or null
  
  // Language preferences
  preferredLanguage String @default("ar")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_preferences")
}

// Categories for organizing content
model Category {
  id          String   @id @default(cuid())
  name        String
  nameAr      String
  description String?
  descriptionAr String?
  icon        String?
  color       String?
  slug        String   @unique
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  articles Article[]

  @@map("categories")
}

// Articles/Content model
model Article {
  id          String   @id @default(cuid())
  title       String
  titleAr     String
  description String?
  descriptionAr String?
  content     String?
  contentAr   String?
  slug        String   @unique
  icon        String?
  color       String?
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  isPublished Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])
  
  // User progress
  progress UserProgress[]

  @@map("articles")
}

// User progress tracking
model UserProgress {
  id        String   @id @default(cuid())
  userId    String
  articleId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  
  // Progress tracking
  completed    Boolean  @default(false)
  completedAt  DateTime?
  timeSpent    Int      @default(0) // in seconds
  lastAccessed DateTime @default(now())
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, articleId])
  @@map("user_progress")
}

// Analytics events for tracking user behavior
model AnalyticsEvent {
  id        String   @id @default(cuid())
  userId    String?
  sessionId String
  eventType String   // 'page_view', 'article_view', 'language_change', etc.
  eventData Json?    // Additional event data
  userAgent String?
  ipAddress String?
  createdAt DateTime @default(now())

  @@map("analytics_events")
}
