// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for tracking user preferences and progress
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  language  String   @default("ar") // 'en' or 'ar'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User preferences
  preferences UserPreferences?
  
  // User progress tracking
  progress UserProgress[]

  @@map("users")
}

// User preferences for analytics and settings
model UserPreferences {
  id                String @id @default(cuid())
  userId            String @unique
  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Analytics consent
  analyticsEnabled  Boolean @default(false)
  cookieConsent     String? // 'accepted', 'declined', or null
  
  // Language preferences
  preferredLanguage String @default("ar")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_preferences")
}

// Categories for organizing content
model Category {
  id            String   @id @default(cuid())
  name          String
  nameEn        String?
  description   String?
  descriptionEn String?
  img           String?  // Image URL or path for the category
  slug          String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  articles Article[]

  @@map("categories")
}

// Articles/Content model
model Article {
  id            String   @id @default(cuid())
  title         String
  titleEn       String?
  special       Boolean @default(false)
  summary       String?
  summaryEn     String?
  content       String?
  contentEn     String?
  slug          String   @unique
  img           String?  // Image URL or path for the article
  isPublished   Boolean  @default(false)
  publishedAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  categories Category[]
  progress UserProgress[]

  @@map("articles")
}

// User progress tracking
model UserProgress {
  id        String   @id @default(cuid())
  userId    String
  articleId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  
  // Progress tracking
  completed    Boolean  @default(false)
  completedAt  DateTime?
  timeSpent    Int      @default(0) // in seconds
  lastAccessed DateTime @default(now())
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, articleId])
  @@map("user_progress")
}

// Analytics events for tracking user behavior
model AnalyticsEvent {
  id        String   @id @default(cuid())
  userId    String?
  sessionId String
  eventType String   // 'page_view', 'article_view', 'language_change', etc.
  eventData Json?    // Additional event data
  userAgent String?
  ipAddress String?
  createdAt DateTime @default(now())

  @@map("analytics_events")
}

// Historical figures model
model Person {
  id                          String               @id @default(cuid())
  name                        String
  fullName                    String?              
  nameTransliterated          String?              // Transliterated name for search/display
  birthYearHijri              String?              // e.g., "53 BH", "1 AH" (store as string for flexibility)
  birthYearGregorian          String?              // e.g., "570 CE", "622 CE"
  deathYearHijri              String?
  deathYearGregorian          String?
  placeOfBirthArabic          String?
  placeOfBirthTransliterated  String?
  placeOfDeathArabic          String?
  placeOfDeathTransliterated  String?

  bioTextSiyarArabic          String?              @db.Text // Full biography text from Siyar
  bioTextSiyarSummaryEn       String?              // Optional: AI-generated or manual summary
  siyarSourceVolume           String?              // e.g., "1", "28"
  siyarSourcePageStart        String?              // e.g., "150"
  siyarSourcePageEnd          String?              // e.g., "160"

  picture                     String?                // will contain some illustraion of the name probably
  appearance                  String?                // description of the appearance
  virtues                     String?                // description of the virtues should be fetched from a book
  ayat                        Json?                // Array of { surah: number, ayah: number } for Quranic references
  slug                        String               @unique // Unique slug for person's page

  // Relations
  relationsFrom               PersonRelation[] @relation("FromPerson")
  relationsTo                 PersonRelation[] @relation("ToPerson")
  titles                      Title[] @relation("PersonTitles")
  participations              BattleParticipation[]
  events                      Event[] 

  @@map("persons")
}

model PersonRelation {
  id     String       @id @default(cuid())
  fromId String
  toId   String
  type   RelationType

  from   Person       @relation("FromPerson", fields: [fromId], references: [id])
  to     Person       @relation("ToPerson", fields: [toId], references: [id])
}

enum RelationType {
  FATHER
  MOTHER
  SON
  DAUGHTER
  SIBLING
  HUSBAND
  WIFE
  MATERNAL_COUSIN
  PATERNAL_COUSIN
  MATERNAL_UNCLE
  PATERNAL_UNCLE
  MATERNAL_AUNT
  PATERNAL_AUNT
  HALF_BROTHER
  HALF_SISTER
  MOTHER_IN_LAW
  STEP_FATHER
  STEP_MOTHER
  STEP_BROTHER
  STEP_SISTER
  STEP_SON
  STEP_DAUGHTER
  FATHER_IN_LAW
  SON_IN_LAW
  DAUGHTER_IN_LAW
  BROTHER_IN_LAW
  SISTER_IN_LAW
  GRANDFATHER
  GRANDMOTHER
  GRANDSON
  GRANDDAUGHTER
  ANCESTOR
  DESCENDANT
  MAWLA
  CONCUBINE
  MATERNAL_NEPHEW
  MATERNAL_NIECE
  PATERNAL_NEPHEW
  PATERNAL_NIECE
}

model Title {
  id     String @id @default(cuid())
  name   String
  nameEn String?
  desc   String?
  slug   String @unique
  people Person[] @relation("PersonTitles")
}

model Battle {
  id           String              @id @default(cuid())
  name         String
  slug         String              @unique
  location     String?             
  locationEn   String?             
  hijri_year   Int?
  nameEn       String?

  // New fields for Google Maps coordinates
  latitude     Float?              // Latitude coordinate (e.g., 27.6099)
  longitude    Float?              // Longitude coordinate (e.g., 35.7501)

  // Relations
  participations BattleParticipation[]
  events         Event[] // Add a relation from Event to Battle if needed for a specific event type

  createdAt    DateTime            @default(now()) // Add createdAt and updatedAt for better tracking
  updatedAt    DateTime            @updatedAt

  @@map("battles")
}

enum ParticipationStatus {
  DIED
  INJURED
  CAPTURED
  WAS_CAPTURED
  ABSENT_EXCUSED
  MARTYRED
}

model BattleParticipation {
  id           String   @id @default(cuid())
  person       Person   @relation(fields: [personId], references: [id])
  personId     String
  battle       Battle   @relation(fields: [battleId], references: [id])
  battleId     String

  isMuslim     Boolean
  status       ParticipationStatus[]

  @@unique([personId, battleId])
}

model Event {
  id                      String       @id @default(cuid())
  name                    String
  nameEn                  String?
  type                    EventType
  hijriYear               Int?
  hijriPeriod             String?
  gregorianYear           Int?
  gregorianPeriod         String?
  hijriDate               String?
  gregorianDate           DateTime?
  location                String?
  locationTransliterated  String?
  description             String?      @db.Text
  descriptionTransliterated String?  @db.Text
  metadata                Json?
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt
  
  // Relations
  people                  Person[]
  battleId                String?
  battle                  Battle?      @relation(fields: [battleId], references: [id])

  @@map("events") // Map to 'events' table
} 

enum EventType {
  BIRTH
  DEATH
  MARRIAGE
  BATTLE
  GAVE_BIRTH
  LIBERATED
  MET
  TRAVEL
  HIJRA
  HIJRA_HABASHA
  OTHER
}